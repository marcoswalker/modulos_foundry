{"version":3,"file":"api.js","sources":["../module/DiceSystem.js","../module/DiceSFX.js"],"sourcesContent":["export class DiceSystem {\n\n    //setting scoping is currently useless as there's no good way for the user to set a \"local\" setting if they are not using this dice set\n    //keeping this for future use\n    static SETTING_SCOPE = {\n        LOCAL: 0, // User specific settings that is not shared with other players\n        SHARED: 1 // User specific settings that is shared with other players\n    }\n\n    static SETTING_TYPE = {\n        BOOLEAN: \"boolean\",\n        SELECT: \"select\",\n        COLOR: \"color\",\n        FILE: \"file\",\n        RANGE: \"range\",\n        STRING: \"string\"\n    }\n\n    static SETTING_FORMATING = {\n        SEPARATOR: \"separator\",\n        HTML: \"html\"\n    }\n\n    static DICE_EVENT_TYPE = {\n        SPAWN: 0,\n        CLICK: 1,\n        RESULT: 2,\n        COLLIDE: 3, //not implemented, risk of performance impact \n        DESPAWN: 4 //not implemented. need a use-case. \"result\" seems to be the enough for despawning animations\n    }\n\n    /**\n     * Creates a new instance of the DiceSystem class.\n     *\n     * @param {string} id - The unique identifier for the dice system.\n     * @param {string} name - The name of the dice system.\n     * @param {Map} [dice=null] - A map of dice for the dice system.\n     * @param {string} [mode=\"default\"] - The mode of the dice system.\n     * @param {string|null} [group=null] - The group the dice system belongs to.\n     */\n    constructor(id, name, mode = \"default\", group = null) {\n        this._id = id;\n        this._name = name;\n        this._dice = new DiceMap(this);\n        this._mode = mode;\n        this._group = group;\n\n        this._settings = [];\n        this._scopedSettings = new Map();\n\n        this._listeners = [];\n\n        this._registeredProcessMaterialCallbacks = [];\n        this._registeredBeforeShaderCompileCallbacks = [];\n    }\n\n    get id() {\n        return this._id;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get dice() {\n        return this._dice;\n    }\n\n    get mode() {\n        return this._mode;\n    }\n\n    get group() {\n        return this._group;\n    }\n\n    get settings() {\n        const objValues = Object.values(DiceSystem.SETTING_TYPE);\n        return this._settings.filter((setting) => objValues.includes(setting.type));\n    }\n\n    on(eventType, listener) {\n        if(!Object.values(DiceSystem.DICE_EVENT_TYPE).includes(eventType))\n            throw new Error(`[DiceSystem.fire] Invalid dice event type: ${eventType}`);\n\n        if (!this._listeners[eventType]) {\n            this._listeners[eventType] = [];\n        }\n        this._listeners[eventType].push(listener);\n    }\n\n    off(eventType, listener) {\n        if (!this._listeners[eventType]) return;\n\n        const index = this._listeners[eventType].indexOf(listener);\n        if (index > -1) {\n            this._listeners[eventType].splice(index, 1);\n        }\n    }\n\n    fire(eventType, event) {\n        if(!Object.values(DiceSystem.DICE_EVENT_TYPE).includes(eventType))\n            throw new Error(`[DiceSystem.fire] Invalid dice event type: ${eventType}`);\n\n        this._dispatchEvent(eventType, event);\n    }\n\n    _dispatchEvent(eventType, event) {\n        if (!this._listeners[eventType]) return;\n\n        for (const listener of this._listeners[eventType]) {\n            listener(event);\n        }\n    }\n\n    getSettingsByDiceType(diceType) {\n        return this._scopedSettings.get(diceType) || this._scopedSettings.get(\"global\");\n    }\n\n    getCacheString(appearance) {\n        return this.id+JSON.stringify(Object.values(appearance));\n    }\n\n    processMaterial(diceType, material, appearance) {\n        if(this.dice.has(diceType)) {\n            for(const callback of this._registeredProcessMaterialCallbacks) {\n                callback(diceType, material, appearance);\n            }\n\n            material.userData.diceType = diceType;\n            material.userData.system = this.id;\n            material.userData.appearance = appearance;\n        }\n        return material;\n    }\n\n    beforeShaderCompile(shader, material) {\n        let fragmentShader = shader.fragmentShader;\n        let vertexShader = shader.vertexShader;\n        //this.onBeforeShaderCompile(shader, material, material.userData.diceType, material.userData.appearance);\n        for(const callback of this._registeredBeforeShaderCompileCallbacks) {\n            callback(shader, material, material.userData.diceType, material.userData.appearance);\n        }\n\n        if(fragmentShader != shader.fragmentShader || vertexShader != shader.vertexShader) {\n            material.customProgramCacheKey = () => {\n                return shader.fragmentShader+shader.vertexShader;\n            }\n            material.needsUpdate = true;\n        }\n    }\n\n    /**\n     * Registers a callback to be called when a material is processed for a dice of this system.\n     * The callback will be called with the diceType, material and appearance as arguments.\n     * @param {function} callback - The callback to be called.\n     */\n    registerProcessMaterialCallback(callback) {\n        this._registeredProcessMaterialCallbacks.push(callback);\n    }\n    \n    /**\n     * Registers a callback to be called when a shader is compiled for a dice of this system.\n     * The callback will be called with the shader, material and appearance as arguments.\n     * @param {function} callback - The callback to be called.\n     */\n    registerBeforeShaderCompileCallback(callback) {\n        this._registeredBeforeShaderCompileCallbacks.push(callback);\n    }\n\n    updateSettings(diceType = \"global\", settings) {\n        this._scopedSettings.set(diceType, {...settings});\n    }\n\n    loadSettings() {\n        this._scopedSettings = new Map();\n        //called after the system is added to the dice factory\n        //check for saved settings and load them\n        const savedSettings = game.user.getFlag(\"dice-so-nice\", \"appearance\");\n\n        //set default settings (just key/value pairs)\n        const defaultSettings = this.settings.reduce((acc, { id, defaultValue }) => ({ ...acc, [id]: defaultValue }), {});\n        this._scopedSettings.set(\"global\", defaultSettings);\n\n        if(savedSettings) {\n            for(let diceType of Object.keys(savedSettings)) {\n                if(savedSettings[diceType].system === this.id) {\n                    this._scopedSettings.set(diceType, {...savedSettings[diceType].systemSettings});\n                }\n            }\n        }\n    }\n\n    /**\n     * Creates a setting object with the specified type, id, name, scope, value, and additional properties.\n     *\n     * @param {string} type - The type of the setting.\n     * @param {string} id - The unique identifier of the setting.\n     * @param {string} name - The name of the setting.\n     * @param {string} scope - The scope of the setting.\n     * @param {any} value - The value of the setting.\n     * @param {Object} [additionalProperties={}] - Additional properties to be added to the setting object.\n     * @return {Object} The created setting object.\n     */\n    _createSetting(type, id, name, scope, defaultValue, additionalProperties = {}) {\n        //field checks\n        if (!Object.values(DiceSystem.SETTING_TYPE).includes(type) && !Object.values(DiceSystem.SETTING_FORMATING).includes(type)) {\n            throw new Error(`[DiceSystem._createSetting] Invalid setting type: ${type}`);\n        }\n\n        if (!Object.values(DiceSystem.SETTING_SCOPE).includes(scope) && !Object.values(DiceSystem.SETTING_SCOPE).includes(scope)) {\n            throw new Error(`[DiceSystem._createSetting] Invalid setting scope: ${scope}`);\n        }\n\n        if (DiceSystem.SETTING_TYPE.hasOwnProperty(type)) {\n            if (!id) {\n                throw new Error(`[DiceSystem._createSetting] Invalid setting id: ${id}`);\n            }\n\n            if (!name) {\n                throw new Error(`[DiceSystem._createSetting] Invalid setting name: ${name}`);\n            }\n        }\n\n        this._settings.push({\n            type,\n            id,\n            name,\n            defaultValue,\n            scope: scope,\n            ...additionalProperties\n        });\n    }\n\n    /**\n     * Adds a visual separator with an optional title.\n     *\n     * @param {Object} args - The options for the separator.\n     * @param {string} [args.name=\"\"] - The title to display\n     * @return {void}\n     */\n    addSettingSeparator({ name = \"\" } = {}) {\n        this._createSetting(\"separator\", null, name, DiceSystem.SETTING_SCOPE.LOCAL, null);\n    }\n\n    addSettingHTML({ name }) {\n        this._createSetting(\"html\", null, name, DiceSystem.SETTING_SCOPE.LOCAL, null);\n    }\n\n    /**\n     * Adds a boolean setting\n     *\n     * @param {Object} args - The arguments object.\n     * @param {string} args.id - The unique identifier for the setting.\n     * @param {string} args.name - The name of the setting.\n     * @param {string} args.scope - The scope of the setting.\n     * @param {boolean} [args.defaultValue=false] - The default value of the setting.\n     * @return {void}\n     */\n    addSettingBoolean({ id, name, scope = DiceSystem.SETTING_SCOPE.SHARED, defaultValue = false }) {\n        this._createSetting(\"boolean\", id, name, scope, defaultValue);\n    }\n\n    /**\n     * Adds a color setting\n     *\n     * @param {Object} args - The arguments object.\n     * @param {string} args.id - The unique identifier for the setting.\n     * @param {string} args.name - The name of the setting.\n     * @param {string} args.scope - The scope of the setting.\n     * @param {string} [args.defaultValue=null] - The default value of the setting, in hex format, e.g. \"#ffffff\".\n     * @return {void}\n     */\n    addSettingColor({ id, name, scope = DiceSystem.SETTING_SCOPE.SHARED, defaultValue = \"#ffffff\" }) {\n        this._createSetting(\"color\", id, name, scope, defaultValue);\n    }\n\n    /**\n     * Adds a range setting\n     *\n     * @param {Object} args - The arguments object.\n     * @param {string} args.id - The unique identifier for the setting.\n     * @param {string} args.name - The name of the setting.\n     * @param {string} args.scope - The scope of the setting.\n     * @param {number} [args.defaultValue=0] - The default value of the setting.\n     * @param {number} [args.min=0] - The minimum value of the setting.\n     * @param {number} [args.max=100] - The maximum value of the setting.\n     * @param {number} [args.step=1] - The step value of the setting.\n     * @return {void}\n     */\n    addSettingRange({ id, name, scope = DiceSystem.SETTING_SCOPE.SHARED, defaultValue = 0, min = 0, max = 100, step = 1 }) {\n        this._createSetting(\"range\", id, name, scope, defaultValue, { min, max, step });\n    }\n\n    /**\n     * Adds a file setting\n     *\n     * @param {Object} args - The arguments object.\n     * @param {string} args.id - The unique identifier for the setting.\n     * @param {string} args.name - The name of the setting.\n     * @param {string} args.scope - The scope of the setting.\n     * @param {string|null} [args.defaultValue=null] - The default value of the setting.\n     * @return {void}\n     */\n    addSettingFile({ id, name, scope = DiceSystem.SETTING_SCOPE.SHARED, defaultValue = \"\" }) {\n        // Make sure defaultValue is a string)\n        defaultValue = defaultValue || \"\";\n        this._createSetting(\"file\", id, name, scope, defaultValue);\n    }\n\n    /**\n     * Adds a select setting\n     *\n     * @param {Object} args - The arguments object.\n     * @param {string} args.id - The unique identifier for the setting.\n     * @param {string} args.name - The name of the setting.\n     * @param {string} args.scope - The scope of the setting.\n     * @param {string|null} [args.defaultValue=null] - The default value of the setting.\n     * @param {Object} [args.options={}] - The options for the select setting.\n     * @param {string} args.options.id - The unique identifier for the option.\n     * @param {string} args.options.label - The label for the option.\n     * @param {string} [args.options.group=null] - The group for the option.\n     * @return {void}\n     */\n    addSettingSelect({ id, name, scope = DiceSystem.SETTING_SCOPE.SHARED, defaultValue = null, options = {} }) {\n        this._createSetting(\"select\", id, name, scope, defaultValue, { options });\n    }\n\n    /**\n     * Adds a string setting.\n     *\n     * @param {Object} options - The options for the setting.\n     * @param {string} options.id - The unique identifier for the setting.\n     * @param {string} options.name - The name of the setting.\n     * @param {string} options.scope - The scope of the setting.\n     * @param {string|null} [options.defaultValue=null] - The default value of the setting.\n     * @return {void}\n     */\n    addSettingString({ id, name, scope = DiceSystem.SETTING_SCOPE.SHARED, defaultValue = \"\" }) {\n        // Make sure defaultValue is a string\n        defaultValue = defaultValue || \"\";\n        this._createSetting(\"string\", id, name, scope, defaultValue);\n    }\n\n    /**\n     * Retrieves a dice object from the dice array based on the given shape and values.\n     *\n     * @param {string} shape - The shape of the dice.\n     * @param {Array} values - The values of the dice.\n     * @return {Object|null} The dice object if found, or null if not found.\n     */\n    getDiceByShapeAndValues(shape, values) {\n        for (let dice of this.dice.values()) {\n            if (dice.shape == shape && dice.values.length == values.length) {\n                return dice;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Retrieves the value of a scoped setting for a specific dice type.\n     *\n     * @param {string} diceType - The type of the dice.\n     * @param {string} settingId - The ID of the setting.\n     * @return {any} The value of the scoped setting, or the default value if not found.\n     */\n    getScopedSettingValue(diceType, settingId) {\n        return this._scopedSettings.get(diceType)?.[settingId] ?? this._scopedSettings.get(\"global\")?.[settingId];\n    }\n\n    /**\n     * Generates the HTML content and data for a settings dialog line based on the provided setting.\n     *\n     * @param {Object} setting - The setting object containing the type, id, name, and value.\n     * @param {string} diceType - The type of the dice or \"global\"\n     * @return {Object} An object containing the HTML content and data for the settings dialog line.\n     */\n    getSettingsDialogLine(setting, diceType) {\n        let line = {\n            content: \"\",\n            data: {}\n        };\n        switch (setting.type) {\n            case DiceSystem.SETTING_TYPE.BOOLEAN:\n                line.content = `\n                    <div class=\"form-group\">\n                        <label>${setting.name}</label>\n                        <div class=\"form-fields\">\n                            <input type=\"checkbox\" name=\"appearance[${diceType}][systemSettings][${setting.id}]\" data-dtype=\"Boolean\" {{checked ${setting.id}.value}} />\n                        </div>\n                    </div>\n                `;\n\n                line.data = {\n                    value: this.getScopedSettingValue(diceType, setting.id)\n                };\n                break;\n            case DiceSystem.SETTING_TYPE.STRING:\n                line.content = `\n                    <div class=\"form-group\">\n                        <label>${setting.name}</label>\n                        <div class=\"form-fields\">\n                            <input type=\"text\" name=\"appearance[${diceType}][systemSettings][${setting.id}]\" value=\"{{${setting.id}.value}}\" data-dtype=\"String\" />\n                        </div>\n                    </div>\n                `;\n\n                line.data = {\n                    value: this.getScopedSettingValue(diceType, setting.id)\n                };\n                break;\n            case DiceSystem.SETTING_TYPE.COLOR:\n                line.content = `\n                    <div class=\"form-group\">\n                        <label>${setting.name}</label>\n                        <div class=\"form-fields\">\n                            <input type=\"text\" data-colorpicker name=\"appearance[${diceType}][systemSettings][${setting.id}]\" value=\"{{${setting.id}.value}}\" data-dtype=\"String\" />\n                            <input type=\"color\" name=\"appearance[${diceType}][systemSettings][${setting.id}Selector]\" value=\"{{${setting.id}.value}}\"\n                                data-edit=\"appearance[${diceType}][systemSettings][${setting.id}]\" data-${setting.id}Selector />\n                        </div>\n                    </div>\n                `;\n\n                line.data = {\n                    value: this.getScopedSettingValue(diceType, setting.id)\n                };\n                break;\n            case DiceSystem.SETTING_TYPE.RANGE:\n                line.content = `\n                    <div class=\"form-group\">\n                        <label>${setting.name}</label>\n                        <div class=\"form-fields\">\n                            <input type=\"range\" name=\"appearance[${diceType}][systemSettings][${setting.id}]\" value=\"{{${setting.id}.value}}\" min=\"{{${setting.id}.min}}\" max=\"{{${setting.id}.max}}\" step=\"{{${setting.id}.step}}\" data-dtype=\"Number\">\n                            <span class=\"range-value\">{{${setting.id}.value}}</span>\n                        </div>\n                    </div>\n                `;\n\n                line.data = {\n                    value: this.getScopedSettingValue(diceType, setting.id),\n                    min: setting.min,\n                    max: setting.max,\n                    step: setting.step\n                };\n                break;\n            case DiceSystem.SETTING_TYPE.FILE:\n                line.content = `\n                    <div class=\"form-group\">\n                        <label>${setting.name}</label>\n                        <div class=\"form-fields\">\n                            <input type=\"file\" name=\"appearance[${diceType}][systemSettings][${setting.id}]\" value=\"{{${setting.id}.value}}\"\n                                data-edit=\"appearance[${diceType}][systemSettings][${setting.id}]\" data-${setting.id} />\n                        </div>\n                    </div>\n                `;\n\n                line.data = {\n                    value: this.getScopedSettingValue(diceType, setting.id)\n                };\n                break;\n            case DiceSystem.SETTING_TYPE.SELECT:\n                line.content = `\n                    <div class=\"form-group\">\n                        <label>${setting.name}</label>\n                        <div class=\"form-fields\">\n                            <select name=\"appearance[${diceType}][systemSettings][${setting.id}]\" data-dtype=\"String\">\n                                {{selectOptions ${setting.id}.options selected=${setting.id}.value}}\n                            </select>\n                        </div>\n                    </div>\n                `;\n\n                line.data = {\n                    value: this.getScopedSettingValue(diceType, setting.id),\n                    options: setting.options\n                };\n                break;\n            case DiceSystem.SETTING_FORMATING.SEPARATOR:\n                if (setting.name != \"\")\n                    line.content = `<h2>${setting.name}</h2>`;\n                else\n                    line.content = `<hr />`;\n                break;\n            case DiceSystem.SETTING_FORMATING.HTML:\n                line.content = setting.name;\n                break;\n        }\n\n        return line;\n    }\n\n    getSettingsDialogContent(diceType) {\n        let dialogContent = {\n            content: \"\",\n            data: {}\n        };\n\n        if (!this._settings.length) return dialogContent;\n\n        // generate the content and data for each setting\n        for (let setting of this._settings) {\n            let line = this.getSettingsDialogLine(setting, diceType);\n            dialogContent.content += line.content;\n            dialogContent.data[setting.id] = line.data;\n        }\n\n        dialogContent.content = `<div data-systemSettings=\"${this.id}\">${dialogContent.content}</div>`;\n\n        return dialogContent;\n    }\n\n    getDefaultSettings() {\n        let settings = this.settings;\n        let defaultSettings = {};\n\n        for (let setting of settings) {\n            defaultSettings[setting.id] = setting.defaultValue;\n        }\n\n        return defaultSettings;\n    }\n}\n\nclass DiceMap extends Map {\n    constructor(diceSystem, ...args) {\n        super(...args);\n        this._diceSystem = diceSystem;\n    }\n    set(key, value) {\n        if (!this.has(key)) {\n            // Set the DiceSystem object as the value of value.diceSystem\n            value.diceSystem = this._diceSystem;\n        }\n        return super.set(key, value);\n    }\n}\n","export class DiceSFX {\n    get nameLocalized(){\n        return game.i18n.localize(this._name);\n    }\n    \n    constructor(box, dicemesh, options){\n        const defaultOptions = {\n            isGlobal : false,\n            muteSound : false\n        };\n\n        this.options = foundry.utils.mergeObject(defaultOptions, options);\n\n        this.dicemesh = dicemesh;\n        this.box = box;\n        this.destroyed = false;\n        this.enableGC = false;\n        this.renderReady = false;\n        this.volume = (dicemesh.options.secretRoll && box.muteSoundSecretRolls) || this.options.muteSound ? 0 : this.box.volume;\n    }\n\n    static async init(){\n        return true;\n    }\n\n    async play(){\n        return Promise.resolve();\n    }\n\n    static async loadAsset(loader,url) {\n        return new Promise((resolve, reject) => {\n          loader.load(url, data=> resolve(data), null, reject);\n        });\n    }\n\n    static getDialogContent(sfxLine,id){\n        let dialogContent = {};\n        let disabled = game.user.isGM ? '':'disabled=\"disabled\"';\n        dialogContent.content = `<div class=\"form-group\">\n                                    <label>{{localize \"DICESONICE.sfxOptionsIsGlobal\"}}</label>\n                                    <div class=\"form-fields\">\n                                        <input type=\"checkbox\" name=\"sfxLine[{{id}}][options][isGlobal]\" data-dtype=\"Boolean\" ${disabled} {{checked isGlobal}} />\n                                    </div>\n                                </div>\n                                <div class=\"form-group\">\n                                    <label>{{localize \"DICESONICE.sfxOptionsMuteSound\"}}</label>\n                                    <div class=\"form-fields\">\n                                        <input type=\"checkbox\" name=\"sfxLine[{{id}}][options][muteSound]\" data-dtype=\"Boolean\" ${disabled} {{checked muteSound}} />\n                                    </div>\n                                </div>`;\n\n        dialogContent.data = {\n            isGlobal : sfxLine.options ? sfxLine.options.isGlobal:false,\n            muteSound : sfxLine.options ? sfxLine.options.muteSound:false,\n            id:id\n        };\n\n        return dialogContent;\n    }\n}"],"names":["DiceSystem","static","LOCAL","SHARED","BOOLEAN","SELECT","COLOR","FILE","RANGE","STRING","SEPARATOR","HTML","SPAWN","CLICK","RESULT","COLLIDE","DESPAWN","constructor","id","name","mode","group","this","_id","_name","_dice","DiceMap","_mode","_group","_settings","_scopedSettings","Map","_listeners","_registeredProcessMaterialCallbacks","_registeredBeforeShaderCompileCallbacks","dice","settings","objValues","Object","values","SETTING_TYPE","filter","setting","includes","type","on","eventType","listener","DICE_EVENT_TYPE","Error","push","off","index","indexOf","splice","fire","event","_dispatchEvent","getSettingsByDiceType","diceType","get","getCacheString","appearance","JSON","stringify","processMaterial","material","has","callback","userData","system","beforeShaderCompile","shader","fragmentShader","vertexShader","customProgramCacheKey","needsUpdate","registerProcessMaterialCallback","registerBeforeShaderCompileCallback","updateSettings","set","loadSettings","savedSettings","game","user","getFlag","defaultSettings","reduce","acc","defaultValue","keys","systemSettings","_createSetting","scope","additionalProperties","SETTING_FORMATING","SETTING_SCOPE","hasOwnProperty","addSettingSeparator","addSettingHTML","addSettingBoolean","addSettingColor","addSettingRange","min","max","step","addSettingFile","addSettingSelect","options","addSettingString","getDiceByShapeAndValues","shape","length","getScopedSettingValue","settingId","getSettingsDialogLine","line","content","data","value","getSettingsDialogContent","dialogContent","getDefaultSettings","diceSystem","args","super","_diceSystem","key","DiceSFX","nameLocalized","i18n","localize","box","dicemesh","foundry","utils","mergeObject","isGlobal","muteSound","destroyed","enableGC","renderReady","volume","secretRoll","muteSoundSecretRolls","init","play","Promise","resolve","loadAsset","loader","url","reject","load","getDialogContent","sfxLine","disabled","isGM"],"mappings":"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"}